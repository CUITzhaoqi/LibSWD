.TH "swd_cmd_t" 3 "Tue Mar 8 2011" "Version 0.0.1" "libswd" \" -*- nroff -*-
.ad l
.nh
.SH NAME
swd_cmd_t \- 
.PP
SWD Command Element Structure.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <libswd.h>\fP
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "union {"
.br
.ti -1c
.RI "   char \fBTRNnMOSI\fP"
.br
.RI "\fI< Payload data union. \fP"
.ti -1c
.RI "   char \fBrequest\fP"
.br
.RI "\fIRequest header data. \fP"
.ti -1c
.RI "   char \fBack\fP"
.br
.RI "\fIAcknowledge response from target. \fP"
.ti -1c
.RI "   int \fBmisodata\fP"
.br
.RI "\fIData read from target (MISO). \fP"
.ti -1c
.RI "   int \fBmosidata\fP"
.br
.RI "\fIData written to target (MOSI). \fP"
.ti -1c
.RI "   int \fBdata32\fP"
.br
.RI "\fIHolds 'int' data type for inspection. \fP"
.ti -1c
.RI "   char \fBmisobit\fP"
.br
.RI "\fISingle bit read from target (bit-per-char). \fP"
.ti -1c
.RI "   char \fBmosibit\fP"
.br
.RI "\fISingle bit written to target (bit-per-char). \fP"
.ti -1c
.RI "   char \fBparity\fP"
.br
.RI "\fIParity bit for data payload. \fP"
.ti -1c
.RI "   char \fBcontrol\fP"
.br
.RI "\fIControl transfer data (one byte). \fP"
.ti -1c
.RI "   char \fBdata8\fP"
.br
.RI "\fIHolds 'char' data type for inspection. \fP"
.ti -1c
.RI "}; "
.br
.ti -1c
.RI "char \fBbits\fP"
.br
.RI "\fIPayload bit count == clk pulses on the bus. \fP"
.ti -1c
.RI "\fBswd_cmdtype_t\fP \fBcmdtype\fP"
.br
.RI "\fICommand type as defined by swd_cmdtype_t. \fP"
.ti -1c
.RI "char \fBdone\fP"
.br
.RI "\fINon-zero if operation already executed. \fP"
.ti -1c
.RI "struct \fBswd_cmd_t\fP * \fBprev\fP"
.br
.ti -1c
.RI "struct \fBswd_cmd_t\fP * \fBnext\fP"
.br
.RI "\fIPointer to the previous/next command. \fP"
.in -1c
.SH "Detailed Description"
.PP 
SWD Command Element Structure. 

In libswd each operation is split into separate commands (request, trn, ack, data, parity) that can be appended to the command queue and later executed. This organization allows better granularity for tracing bugs and makes possible to compose complete bus/target operations made of simple commands. 
.SH "Member Data Documentation"
.PP 
.SS "char \fBswd_cmd_t::TRNnMOSI\fP"
.PP
< Payload data union. Holds/sets bus direction: MOSI when zero, MISO for other. 

.SH "Author"
.PP 
Generated automatically by Doxygen for libswd from the source code.
